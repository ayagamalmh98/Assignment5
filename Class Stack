package eg.edu.alexu.csd.datastructure.stack_01_;



public class Stack {
	Node top; 
	  
    static class Node { 
        Object data; 
        Node next; 
  
        Node(Object data) { 
            this.data = data; 
        } 
    }
    /**
	* Removes the element at the top of stack and returns that element.
	*
	* @return top of stack element, or through exception if empty
	*/
    public Object pop()  {
    	RuntimeException es = new RuntimeException();
    	
    	
    	Object q;
    	if (top==null ) throw es;
    	else {
    		 q=top.data;
    		top=top.next;	
    	}
    	return q;
 	
    }
    /**
	* Get the element at the top of stack without removing it from stack.
	*
	* @return top of stack element, or through exception if empty
	*/
    public Object peek() {
    	RuntimeException es = new RuntimeException();
    	if (top==null) throw es;
    	else
    		return top.data;
    
    }
    /**
	* Pushes an item onto the top of this stack.
	*
	* @param object
	* to insert
	*/
    public void push(Object element) {
    	Node x=new Node(element);	
    	x.next=top;
    	top=x;
    }
    /**
	* Tests if this stack is empty
	*
	* @return true if stack empty
	*/
    public boolean isEmpty() {
    	Node current=top; int s=0;
    	while (current!=null) {
    		s++; current=current.next;
    	}
    	return (!(s>0));
    	
    }
    /**
	* Returns the number of elements in the stack.
	*
	* @return number of elements in the stack
	*/
    public int size() {
    	Node current=top; int s=0;
    	while (current!=null) {
    		s++; current=current.next;
    	}
    	return s;
    }
    /*
    public void print () {
    	Node current=top;
    	while (current!=null) {
    		System.out.println(current.data);
    		current=current.next;
    	}
    	
    }
    */

}
